version: "3"

# DEFAULT SERVICE
services:
  _python_image_build:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    image: fastAPI
    command: ["echo", "build finished"]

  # RABBITMQ BROKER
  rabbitmq:
    build: ./rabbitmq
    container_name: rabbitmq
    networks:
      - production-boilerplate
    ports:
      - "5001:5001"
      - "15001:15001"

  # BACKEND MEMORY RESULTS
  redis:
    build: ./redis
    container_name: redis
    networks:
      - production-boilerplate
    ports:
      - "5002:5002"

  # CELERY WORKER
  celery:
    build:
      context: ./fastapi
      dockerfile: Dockerfile.main
    image: fastapi-main
    container_name: celeryWorker
    networks:
      - production-boilerplate
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_BACKEND_URL=${CELERY_BACKEND_URL}
      - CELERY_QUEUE=${CELERY_QUEUE}
    command: ./starter.sh --target worker
    depends_on:
      - redis
      - rabbitmq

  # TEST OF MONITOR (CHECK IF IS POSSIBLE TO USE)
  flower:
    image: fastapi-celery-main
    container_name: celery-flower
    networks:
      - production-boilerplate
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_BACKEND_URL=${CELERY_BACKEND_URL}
    command: ./starter.sh --target flower
    ports:
      - "5003:5003"
    depends_on:
      - redis
      - rabbitmq
      - celery

  # API
  fastapi:
    image: fastapi-celery-main
    container_name: fastapi
    networks:
      - production-boilerplate
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_BACKEND_URL=${CELERY_BACKEND_URL}
    command: ./starter.sh --target fastapi
    ports:
      - "5004:5080"
      #- "8000:80"
    depends_on:
      - redis
      - rabbitmq
      - celery

networks:
  production-boilerplate:
    driver: bridge